
<<硬编码>>
在计算机程序或文本编辑中，硬编码是指将可变变量用一个固定值来代替的方法。
用这种方法编译后，如果以后需要更改此变量就非常困难了。
大部分程序语言里，可以将一个固定数值定义为一个标记，然后用这个特殊标记来取代变量名称。
当标记名称改变时，变量名不变，这样，当重新编译整个程序时，所有变量都不再是固定值，这样就更容易的实现了改变变量的目的。
尽管通过编辑器的查找替换功能也能实现整个变量名称的替换，但也很有可能出现多换或者少换的情况，而在计算机程序中，任何小错误的出现都是不可饶恕的。
最好的方法是单独为变量名划分空间，来实现这种变化，就如同前面说的那样，将需要改变的变量名暂时用一个定义好的标记名称来代替就是一种很好的方法。
通常情况下，都应该避免使用硬编码方法。　

java小例子： int a=2,b=2;
硬编码：if(a==2) return false;
不是硬编码 if(a==b) return true;

C++例子：
int user[120];
如果突然在程序中出现下面一段代码
for (int i=0; i<120; i++){
...
}
120是什么，为什么是120？这里的120就属于数字式“硬编码”，这不仅让程序很难读，而且不易维护。如果要修改120，就的修改程序中所有与此有关的120。应将数字式“硬编码”声明成一个宏，这样程序不仅易读，而且还可以一改全改。
#define MAX_USER_CNT 120
for (int i=0; i<MAX_USER_CNT; i++){
...
}[1]

*【for-in循环(for-in Loops)】
for-in循环应该用在非数组对象的遍历上，使用for-in进行循环也被称为“枚举”。
从技术上将，你可以使用for-in循环数组（因为JavaScript中数组也是对象），但这是不推荐的。
因为如果数组对象已被自定义的功能增强，就可能发生逻辑错误。
另外，在for-in中，属性列表的顺序（序列）是不能保证的。所以最好数组使用正常的for循环，对象使用for-in循环。
举例：
 js中数组遍历for与for in区别(强烈建议不要使用for in遍历数组)

 js中遍历数组的有两种方式
 var array=['a']
 //标准的for循环
 for(var i=1;i<array.length;i++){
     alert(array[i])
 }

 //foreach循环
 for(var i in array){
     alert(array[i])
 }

 正常情况下上面两种遍历数组的方式结果一样。
 标准的for循环中的i是number类型,表示的是数组的下标,但是foreach循环中的i表示的是数组的key是string类型,因为js中一切皆为对象。
 自己试试 alert(typeof i);这个区别是小问题。现在我加上如下代码，上面的执行结果就不一样了。

 //扩展了js原生的Array
  Array.prototype.test=function(){

  };
 例子：

 var array=['a'];
 Array.prototype.test=function(){

 };

 for(var i in array){
     console.log(i, array[i], array[0], array[1])
 }

 for(var i=1;i<array.length;i++){
     console.log(array[i])
 }

试试看上面的代码执行什么。我们发现标准的for循环任然真正的对数组循环, 但是此时foreach循环对我刚才写的test方法写打印出来了。
这就是for与foreach遍历数组的最大区别，如果我们在项目采用的是用foreach遍历数组，假设有一天谁不小心自己为了扩展js原生的Array类，
或者引入一个外部的js框架也扩展了原生Array。那问题就来了。再此建议两点

1> 不要用for in遍历数组，全部统一采用标准的for循环变量数组( 我们无法保证我们引入的js是否会采用prototype扩展原生的Array )
2> 如果要对js的原生类扩展的时候，不要采用prototype了


---


有个很重要的hasOwnProperty()方法，当遍历对象属性的时候可以过滤掉从原型链上下来的属性。
思考下面一段代码:

// 对象
var man = {
   hands: 2,
   legs: 2,
   heads: 1
};

// 在代码的某个地方
// 一个方法添加给了所有对象
if (typeof Object.prototype.clone === "undefined") {
   Object.prototype.clone = function () {};
}

{
在这个例子中，我们有一个使用对象字面量定义的名叫man的对象。
在man定义完成后的某个地方，在对象原型上增加了一个很有用的名叫 clone()的方法。
此原型链是实时的，这就意味着所有的对象自动可以访问新的方法。
为了避免枚举man的时候出现clone()方法，你需要应用hasOwnProperty()方法过滤原型属性。
如果不做过滤，会导致clone()函数显示出来，在大多数情况下这是不希望出现的。
}

// 1.
// for-in 循环
for (var i in man) {
   if (man.hasOwnProperty(i)) { // 过滤
      console.log(i, ":", man[i]);
   }
}
/* 控制台显示结果
hands : 2
legs : 2
heads : 1
*/
// 2.
// 反面例子:
// for-in loop without checking hasOwnProperty()
for (var i in man) {
   console.log(i, ":", man[i]);
}
/*
控制台显示结果
hands : 2
legs : 2
heads : 1
clone: function()
*/


另外一种使用hasOwnProperty()的形式是取消Object.prototype上的方法。像是：
for (var i in man) {
   if (Object.prototype.hasOwnProperty.call(man, i)) { // 过滤
      console.log(i, ":", man[i]);
   }
}

其好处在于在man对象重新定义hasOwnProperty情况下避免命名冲突。也避免了长属性查找对象的所有方法，你可以使用局部变量“缓存”它。

var i, hasOwn = Object.prototype.hasOwnProperty;
for (i in man) {
    if (hasOwn.call(man, i)) { // 过滤
        console.log(i, ":", man[i]);
    }
}

<<严格来说，不使用hasOwnProperty()并不是一个错误。
根据任务以及你对代码的自信程度，你可以跳过它以提高些许的循环速度。
但是当你对当前对象内容（和其原型链）不确定的时候，添加hasOwnProperty()更加保险些。>>

格式化的变化（通不过JSLint）会直接忽略掉花括号，把if语句放到同一行上。其优点在于循环语句读起来就像一个完整的想法（每个元素都有一个自己的属性”X”，使用”X”干点什么）：

// 警告： 通不过JSLint检测
var i, hasOwn = Object.prototype.hasOwnProperty;
for (i in man) if (hasOwn.call(man, i)) { // 过滤
    console.log(i, ":", man[i]);
}



*【（不）扩展内置原型((Not) Augmenting Built-in Prototypes)】

xxx


*【switch模式(switch Pattern)】
你可以通过类似下面形式的switch语句增强可读性和健壮性：
var inspect_me = 0,
    result = '';
switch (inspect_me) {
case 0:
   result = "zero";
   break;
case 1:
   result = "one";
   break;
default:
   result = "unknown";
}

这个简单的例子中所遵循的风格约定如下：

每个case和switch对齐（花括号缩进规则除外）
每个case中代码缩进
每个case以break清除结束
避免贯穿（故意忽略break）。如果你非常确信贯穿是最好的方法，务必记录此情况，因为对于有些阅读人而言，它们可能看起来是错误的。
以default结束switch：确保总有健全的结果，即使无情况匹配。

*【避免隐式类型转换(Avoiding Implied Typecasting )】

JavaScript的变量在比较的时候会隐式类型转换。这就是为什么一些诸如：false == 0 或 “” == 0 返回的结果是true。
为避免引起混乱的隐含类型转换，在你比较值和表达式类型的时候始终使用===和!==操作符。
var zero = 0;
if (zero === false) {
   // 不执行，因为zero为0, 而不是false
}

// 反面示例
if (zero == false) {
   // 执行了...
}


还有另外一种思想观点认为==就足够了===是多余的。例如，当你使用typeof你就知道它会返回一个字符串，所以没有使用严格相等的理由。
然而，JSLint要求严格相等，它使代码看上去更有一致性，可以降低代码阅读时的精力消耗。（“==是故意的还是一个疏漏？”）



*【编码规范(Coding Conventions)】
建立和遵循编码规范是很重要的，这让你的代码保持一致性，可预测，更易于阅读和理解。一个新的开发者加入这个团队可以通读规范，理解其它团队成员书写的代码，更快上手干活。

许多激烈的争论发生会议上或是邮件列表上，问题往往针对某些代码规范的特定方面（例如代码缩进，是Tab制表符键还是space空格键）。
如果你是 你组织中建议采用规范的，准备好面对各种反对的或是听起来不同但很强烈的观点。要记住，建立和坚定不移地遵循规范要比纠结于规范的细节重要的多。

*【缩进(Indentation)】


***
{
js的基本数据类型有哪些？


 ECMAScript中有5中简单数据类型（也称为基本数据类型）: Undefined、Null、Boolean、Number和String。还有1中复杂的数据类型————Object，Object本质上是由一组无序的名值对组成的。

 其中Undefined、Null、Boolean、Number都属于基本类型。Object、Array和Function则属于引用类型，String有些特殊，具体的会在下面展开分析。

 变量

 ECMAScript中用var关键字来定义变量，因为js是弱类型的，所以无法确定变量一定会存储什么值，也就不知道变量到底会是什么类型，而且变量的类型可以随时改变。

 这就是ECMAScript是松散类型的来由，所谓松散类型就是可以用来保存任何类型的数据。
 }
***











































